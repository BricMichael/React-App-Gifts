{"version":3,"sources":["components/AddCategories.jsx","components/GifItem.jsx","Helpers/Get_Gifs.js","components/GifGrid.jsx","hooks/useFetchGifs.jsx","AppGifs.jsx","index.js"],"names":["AddCategories","setCategories","useState","input","setInput","action","onSubmit","e","preventDefault","target","reset","type","placeholder","onChange","event","value","console","log","onClick","length","data","GifItem","url","title","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","gifs","map","item","id","images","downsized","GifGrid","loading","object","setObject","useEffect","then","imgs","useFetchGifs","AppGifs","categories","root","document","getElementById","ReactDOM","render"],"mappings":"iLAgDeA,EA5CO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAyBzC,OACI,qCACI,6CACA,uBAAMC,OAAO,IAAIC,SATJ,SAAEC,GACnBA,EAAEC,iBACFD,EAAEE,OAAOC,SAOL,UACI,uBACIC,KAAK,OACLC,YAAY,WACZC,SA5BI,SAAEN,GAClB,IAAMO,EAAQP,EAAEE,OAAOM,MACvBX,EAAUU,GAEVE,QAAQC,IAAI,wCAA0CH,MA0B9C,wBAAQI,QAvBC,WACZf,EAAMgB,OAAS,GAChBlB,GAAe,SAAAmB,GAAI,OAAMjB,GAAN,mBAAgBiB,QAqB/B,2B,QCnBDC,EAhBC,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,MAEpB,OACI,sBAAKC,UAAY,2CAAjB,UAEI,qBAAKC,IAAMH,EAAMI,IAAMH,EAAQC,UAAW,SAC1C,4BAAID,Q,uBCPHI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbP,EAFa,0FAE6EQ,UAAWF,GAFxF,sBAGAG,MAAOT,GAHP,cAGbU,EAHa,gBAIIA,EAAKC,OAJT,uBAIXb,EAJW,EAIXA,KAEFc,EAAOd,EAAKe,KAAK,SAAAC,GAAS,IAAD,EAC3B,MAAM,CACFb,MAAOa,EAAKb,MACZc,GAAID,EAAKC,GACTf,IAAG,UAAEc,EAAKE,cAAP,aAAE,EAAaC,UAAUjB,QAVjB,kBAgBZY,GAhBY,4CAAH,sDCgCLM,EA7BC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEX1B,mBAAS,CAClCkB,KAAM,GACNqB,SAAS,IAJ2B,mBAEhCC,EAFgC,KAExBC,EAFwB,KAqBxC,OAdAC,qBAAW,WACPjB,EAASC,GACRiB,MAAM,SAAAC,GAEHH,EAAU,CACNvB,KAAM0B,EACNL,SAAS,SAMlB,CAAEb,IAEEc,EDlB0BK,CAAcnB,GAAlCU,EAFiB,EAEtBlB,KAAaqB,EAFS,EAETA,QAErB,OACI,qCACI,oBAAIjB,UAAY,WAAhB,SAA6BI,IAC3Ba,GAAW,mBAAGjB,UAAU,wCAAb,qBACb,qBAAKA,UAAY,YAAjB,SAGQc,EAAOH,KAAK,SAAAW,GAAI,OAEZ,cAAC,EAAD,eAEOA,GADGA,EAAKT,aEYxBW,EA1BC,WAAO,IAAD,EAEqB9C,mBAAS,CAAC,YAF/B,mBAET+C,EAFS,KAEGhD,EAFH,KAKlB,OACI,qCACI,yCACA,cAAC,EAAD,CAAeA,cAAkBA,IACjC,uBACA,6BAEOgD,EAAWd,KAAK,SAAAC,GAAI,OAEf,cAAC,EAAD,CAECR,SAAaQ,GADLA,YCd3Bc,G,MAAOC,SAASC,eAAe,SAErCC,IAASC,OAAO,cAAC,EAAD,IAAaJ,K","file":"static/js/main.b3fc44f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategories = ({ setCategories }) => {\r\n\r\n    const [ input, setInput ] = useState('');\r\n\r\n    const handleInput = ( e ) => {\r\n        const event = e.target.value;\r\n        setInput( event );\r\n\r\n        console.log('el usuario me ha introducido valores ' + event) // asegurarme de que corre en los test\r\n    }\r\n\r\n    const handleButton = (/*e*/) => {\r\n        if ( input.length > 2 ){\r\n            setCategories( data => [ input, ...data ]) \r\n           // e.preventDefault();  no debe ir, quitar despues de las pruebas\r\n        }\r\n        // console.log('handleSubmit', input )  //pruebas\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        e.target.reset();\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            <h2>SEARCH GIFS</h2>\r\n            <form action=\"#\" onSubmit = { handleSubmit }>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Write...\"\r\n                    onChange = { handleInput }                \r\n                />  \r\n                <button onClick = { handleButton } >Search</button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nAddCategories.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategories;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifItem = ({ url, title }) => {\r\n\r\n    return(\r\n        <div className = \"card animate__animated animate__bounceIn\">\r\n\r\n            <img src={ url } alt={ title } className ='imgs'/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n} \r\n\r\nGifItem.propTypes = {\r\n    url: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifItem;","\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=H65BYmFOqhXoLMHuaJ5i6CwEQDFbSm5g&q=${ encodeURI( category ) }&limit=10`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( item => {\r\n        return{\r\n            title: item.title,\r\n            id: item.id,\r\n            url: item.images?.downsized.url\r\n        }\r\n\r\n    } )\r\n    \r\n \r\n    return gifs;\r\n\r\n\r\n}","import React from 'react';\r\nimport GifItem from './GifItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n   \r\n    return(\r\n        <>\r\n            <h2 className = 'color_h2'>{ category }</h2>\r\n            { loading && <p className=\"card animate__animated animate__flash\">Loading</p> }\r\n            <div className = 'card-grip'>\r\n                {\r\n\r\n                    images.map( imgs => (\r\n\r\n                        <GifItem \r\n                          key = { imgs.id } \r\n                          { ...imgs } \r\n                        />\r\n\r\n                    ))\r\n                }   \r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../Helpers/Get_Gifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ object, setObject] = useState({\r\n        data: [],\r\n        loading: true,\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n            setObject({\r\n                data: imgs,\r\n                loading: false\r\n\r\n            });\r\n\r\n        })\r\n\r\n    }, [ category ])\r\n\r\n    return object;\r\n\r\n}","import React, { useState } from 'react';\r\nimport AddCategories from './components/AddCategories';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nconst AppGifs = () => {\r\n\r\n     const [ categories, setCategories ] = useState(['Perfect']);\r\n    \r\n\r\n    return(\r\n        <>\r\n            <h1>APPGIFS</h1>\r\n            <AddCategories setCategories = { setCategories } />\r\n            <br/>\r\n            <ol>\r\n               {\r\n                   categories.map( item => (\r\n\r\n                        <GifGrid \r\n                         key = { item }\r\n                         category = { item }                                              \r\n                        />\r\n                        )\r\n                    )\r\n               }         \r\n            </ol>\r\n        </>\r\n    ); \r\n}\r\n\r\nexport default AppGifs;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppGifs from './AppGifs';\n\nimport './index.css';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppGifs />, root);\n\n"],"sourceRoot":""}